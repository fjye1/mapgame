<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Hex Grid Display</title>
    <link rel="stylesheet" href="/css/styles.css" />
  </head>
  <body>
    <h1 id="date-display">Year 1 – January 1 – Day 1</h1>
    <div id="info">Click a hex to see its data</div>
    <div id="viewDisplay"></div>
    <div id="hex-container"></div>

    <div id="button-container">
      <button id="btn-generate">Generate Map</button>
      <button id="btn-toggle">Toggle View</button>
      <button id="next-day">Next Day</button>
      <button id="zoom-in">Zoom In</button>
      <button id="zoom-out">Zoom Out</button>
    </div>

    <script type="module">
      import { generateMap } from "/js/map/generateMap.js";
      import {
        getHeightColor,
        getTempColor,
        getPrecipitationColor,
        getResourceColor,
        computeResourceMax,
      } from "/js/terrainConfig.js";
      import { getDateFromDay, totalDays } from "/js/dateUtils.js";
      import { generateTemperature } from "/js/map/climate.js";
      import {addRiverToHex, generateRivers} from "/js/map/rivers.js"

      const size = 20;
      let zoomLevel = 1;
      const zoomStep = 0.1,
        minZoom = 0.5,
        maxZoom = 2;

      let currentView = "terrain";
      let views = [
        "terrain",
        "height",
        "temp",
        "precipitation",
        "stone",
        "limestone",
        "coal",
        "iron",
        "gold",
        "salt",
        "wood",
        "food",
        "meat",
        "soil",
        "sand",
        "clay",
      ];
      let currentViewIndex = 0;

      document.getElementById("viewDisplay").textContent = currentView;

      let currentMap = [];
      let currentDay = 300;
      let currentYear = 1;

      // ----------------- Date display -----------------
      function updateDisplay() {
        const { month, day } = getDateFromDay(currentDay);
        document.getElementById(
          "date-display"
        ).textContent = `Year ${currentYear} – ${month} ${day} – Day ${currentDay}`;
      }
      updateDisplay();

      // ----------------- Zoom -----------------
      function setZoom(containerId) {
        const container = document.getElementById(containerId);
        const innerDiv = container.firstElementChild;
        if (!innerDiv) return;
        innerDiv.style.transform = `scale(${zoomLevel})`;
        innerDiv.style.transformOrigin = "top left";
      }

      function zoom(containerId, delta) {
        const container = document.getElementById(containerId);
        const innerDiv = container.firstElementChild;
        if (!innerDiv) return;

        const centerX = container.scrollLeft + container.clientWidth / 2;
        const centerY = container.scrollTop + container.clientHeight / 2;

        const oldZoom = zoomLevel;
        zoomLevel = Math.max(minZoom, Math.min(maxZoom, zoomLevel + delta));

        innerDiv.style.transform = `scale(${zoomLevel})`;
        innerDiv.style.transformOrigin = "top left";

        container.scrollLeft =
          (centerX / oldZoom) * zoomLevel - container.clientWidth / 2;
        container.scrollTop =
          (centerY / oldZoom) * zoomLevel - container.clientHeight / 2;
      }

      document
        .getElementById("zoom-in")
        .addEventListener("click", () => zoom("hex-container", zoomStep));
      document
        .getElementById("zoom-out")
        .addEventListener("click", () => zoom("hex-container", -zoomStep));

      // ----------------- Hex grid helpers -----------------
      function cubeToPixel(hex, size) {
        const x = 1.5 * size * hex.q;
        const y = Math.sqrt(3) * size * (hex.r + hex.q / 2);
        return { horiz: x, vert: y };
      }

      function drawHexGrid(containerId, hexes, size, view = "terrain") {
        const container = document.getElementById(containerId);
        container.innerHTML = ""; // clear

        let minX = Infinity,
          maxX = -Infinity,
          minY = Infinity,
          maxY = -Infinity;
        hexes.forEach((hex) => {
          const { horiz, vert } = cubeToPixel(hex, size);
          minX = Math.min(minX, horiz);
          maxX = Math.max(maxX, horiz);
          minY = Math.min(minY, vert);
          maxY = Math.max(maxY, vert);
        });

        const contentWidth = maxX - minX + size;
        const contentHeight = maxY - minY + size;

        const innerDiv = document.createElement("div");
        innerDiv.style.position = "relative";
        innerDiv.style.width = contentWidth + "px";
        innerDiv.style.height = contentHeight + "px";

        hexes.forEach((hex) => {
          const pos = cubeToPixel(hex, size);
          const div = hex.domElement;
          div.style.position = "absolute";
          div.style.left = `${pos.horiz - minX}px`;
          div.style.top = `${pos.vert - minY}px`;

          // Tooltip / debug alert
          div.onclick = () => {
            const gr = hex.groundResources;
            const ts = hex.topSoil;

            alert(
              `Hex: q=${hex.q} r=${hex.r} s=${hex.s}\n` +
                `Terrain: ${hex.terrain}\nHeight: ${hex.height}\nTemp: ${hex.temp}\nPrecipitation: ${hex.precipitation}\nWaterVolume: ${hex.waterVolume}\n` +
                `\nGround Resources:\n` +
                `Stone: ${gr.stone.amount}, Limestone: ${gr.limestone.amount}, Coal: ${gr.coal.amount}, Iron: ${gr.iron.amount}, Gold: ${gr.gold.amount}, Salt: ${gr.salt.amount}` +
                `\n\nTopSoil:\n` +
                `Wood: ${ts.wood.amount}, Food: ${ts.food.amount}, Meat: ${ts.meat.amount}, Soil: ${ts.soil.amount}, Sand: ${ts.sand.amount}, Clay: ${ts.clay.amount}`
            );
          };

          // Update terrain color per view
          const resourceMax = computeResourceMax(currentMap);

          const colorMap = {
            terrain: hex.terrainColor,
            height: getHeightColor(hex),
            temp: getTempColor(hex.temp),
            precipitation: getPrecipitationColor(hex.precipitation),

            // ground resources
            stone: getResourceColor(
              hex.groundResources.stone.amount,
              resourceMax.stone
            ),
            limestone: getResourceColor(
              hex.groundResources.limestone.amount,
              resourceMax.limestone
            ),
            coal: getResourceColor(
              hex.groundResources.coal.amount,
              resourceMax.coal
            ),
            iron: getResourceColor(
              hex.groundResources.iron.amount,
              resourceMax.iron
            ),
            gold: getResourceColor(
              hex.groundResources.gold.amount,
              resourceMax.gold
            ),
            salt: getResourceColor(
              hex.groundResources.salt.amount,
              resourceMax.salt
            ),

            // topsoil resources
            wood: getResourceColor(hex.topSoil.wood.amount, resourceMax.wood),
            food: getResourceColor(hex.topSoil.food.amount, resourceMax.food),
            meat: getResourceColor(hex.topSoil.meat.amount, resourceMax.meat),
            soil: getResourceColor(hex.topSoil.soil.amount, resourceMax.soil),
            sand: getResourceColor(hex.topSoil.sand.amount, resourceMax.sand),
            clay: getResourceColor(hex.topSoil.clay.amount, resourceMax.clay),
          };

          div.style.backgroundColor = colorMap[currentView];

          innerDiv.appendChild(div);
        });

        container.appendChild(innerDiv);
      }

      // ----------------- Buttons -----------------
      document.getElementById("btn-generate").addEventListener("click", () => {
        currentMap = generateMap(32, currentDay);
        drawHexGrid("hex-container", currentMap, size, currentView);
        setZoom("hex-container");
        document.getElementById("viewDisplay").textContent = currentView;
        currentMap.forEach((hex) => {
          const container = document.getElementById("hex-container");
          container.appendChild(hex.domElement);

          // Paint rivers if present
          if (hex.isRiver) addRiverToHex(hex, hex.flowDirection);
        });
      });

      document.getElementById("btn-toggle").addEventListener("click", () => {
        if (!currentMap.length) return;

        currentViewIndex = (currentViewIndex + 1) % views.length;
        currentView = views[currentViewIndex];
        drawHexGrid("hex-container", currentMap, size, currentView);
        setZoom("hex-container");
        document.getElementById("viewDisplay").textContent = currentView;
      });

      document.getElementById("next-day").addEventListener("click", () => {
        currentDay++;
        if (currentDay > totalDays) {
          currentDay = 1;
          currentYear++;
        }
        updateDisplay();

        currentMap.forEach((hex) => {
          hex.temp = generateTemperature(
            hex.q,
            hex.r,
            hex.s,
            hex.height,
            currentDay
          );
        });

        drawHexGrid("hex-container", currentMap, size, currentView);
        setZoom("hex-container");
      });
    </script>
  </body>
</html>
